QUE1) Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job.You want to find candidates who are proficient in Python, Tableau, and PostgreSQL. 
Write a query to list the candidates who possess all of the required skills for the job. Sort the the output by candidate ID in ascending order.

SELECT candidate_id
FROM candidates
WHERE skill IN ('Python','Tableau','PostgreSQL')
GROUP BY candidate_id
HAVING COUNT(skill) = 3
ORDER BY candidate_id;

QUE2) Assume you are given the tables below about Facebook pages and page likes. 
Write a query to return the page IDs of all the Facebook pages that don't have any likes. The output should be in ascending order.

SELECT pages.page_id
FROM pages
LEFT OUTER JOIN page_likes AS pg
ON pages.page_id = pg.page_id
WHERE pg.page_id IS NULL;

QUE3) Tesla is investigating bottlenecks in their production, and they need your help to extract the relevant data. 
Write a SQL query that determines which parts have begun the assembly process but are not yet finished.

SELECT part
FROM parts_assembly
WHERE finish_date is NULL
GROUP BY part;


HackerRank que>
QUE4) Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
The CITY table is described as follows:

select * from city
where countrycode = 'USA' and population > 100000

QUE5) Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
The CITY table is described as follows:

select NAME from city
where countrycode= 'USA' and population > 120000

QUE6) Query all columns (attributes) for every row in the CITY table. The CITY table is described as follows:
select * from city

QUE7) Query all columns for a city in CITY with the ID 1661.
select * from city
where ID= 1661

QUE8) Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

select * from city
where countrycode = 'JPN'

QUE9) Query a list of CITY and STATE from the STATION table.
select city, state from station

QUE10) Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer

select distinct city from station 
where MOD (id,2)=0 
ORDER BY CITY ;

QUE11) Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
The STATION table is described as follows:

select count(CITY)- count(distinct CITY) from station;

QUE12) Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:

select CITY,LENGTH(CITY) from STATION order by Length(CITY) asc, CITY limit 1; 
select CITY,LENGTH(CITY) from STATION order by Length(CITY) desc, CITY limit 1; 

QUE13)Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

select city from station 
where city REGEXP "^[aeiou].*" 
order by city;

QUE14) Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT CITY FROM STATION 
WHERE CITY REGEXP '[aeiouAEIOU]$';

QUE15) Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates.

SELECT DISTINCT city
FROM   station
WHERE  city RLIKE '^[aeiouAEIOU].*[aeiouAEIOU]$'

QUE16) Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY NOT RLIKE '^[aeiouAEIOU].*$'

QUE17) Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT REGEXP '[aeiou]$'

QUE18) Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT city FROM station 
WHERE city RLIKE '^[^aeiouAEIOU].*|.*[^AEIOUaeiou]$';

QUE19) Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT REGEXP '^[aeiou]'
AND CITY NOT REGEXP '[aeiou]$'

QUE20) Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT Name
FROM STUDENTS
WHERE Marks > 75
ORDER BY SUBSTRING(Name, LENGTH(Name)-2, 3), ID;

QUE21) Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000 per month 
who have been employees for less than 10 months.Sort your result by ascending employee_id.

SELECT name FROM Employee 
WHERE salary > 2000 AND months < 10 
ORDER BY employee_id;

QUE22) A median is defined as a number separating the higher half of a data set from the lower half. 
Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  4 decimal places.

SELECT ROUND(S1.LAT_N, 4) 
FROM STATION AS S1 
WHERE (SELECT ROUND(COUNT(S1.ID)/2) - 1 
       FROM STATION) = 
      (SELECT COUNT(S2.ID) 
       FROM STATION AS S2 
       WHERE S2.LAT_N > S1.LAT_N);

QUE23) The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, 
and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, 
then sort the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.

select m.hacker_id, h.name, sum(score) as total_score from
(select hacker_id, challenge_id, max(score) as score
from Submissions group by hacker_id, challenge_id) as m
join Hackers as h
on m.hacker_id = h.hacker_id
group by m.hacker_id, h.name
having total_score > 0
order by total_score desc, m.hacker_id;


QUE24) Top 10 salesperson Easy
A salesperson is a person whose job is to sell products or services. From the following dataframe, write a SQL query to find the top 10 salesperson that have made highest sale. Return their names and total sale amount.
Table-I: sale,  Table-II: salesman
ANS = 
SELECT salesman_name, SUM(sale_amount) as total_sale
FROM salesman  a JOIN sales b ON a.salesman_id = b.salesman_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;

QUE25) Information of SalespersonEasy
From the following dataframes, write a SQL query to find the information on each salesperson of ABC Company. Return name, city, country and state of each salesperson.
Table-I: salespersons, Table-II: address

select  first_name,last_name, city, state
from salespersons a  left join address b
on a.salesperson_id = b.salesperson_id

QUE26) Find customers Easy
From the following Dataframes, write a SQL query to find those customers who never ordered anything. Return customer name.
Table-I: customers, Table-II: orders
ANS = 
SELECT customer_name as customers
FROM customers
WHERE customer_id NOT IN(SELECT customer_id FROM orders);

QUE27) High pollutionEasy
From the following dataframe, write a SQL query to find all dates' city ID with higher pollution compared to its previous dates (yesterday). Return city ID, date and pollution.
Table: so2_pollution
ANS = 
SELECT N.city_id AS 'City ID'
FROM so2_pollution N,so2_pollution P
where N.so2_amt > P.so2_amt
limit2


QUE28) Duplicate emails Easy
From the following dataframe, write a SQL query to find all the duplicate emails of employees keeping the unique email with the greater employee id. Return employee id and duplicate emails.
ANS = 
SELECT p1.*
FROM employees p1,
    employees p2
WHERE
    p1.email_id = p2.email_id AND p1.employee_id > p2.employee_id

QUE29) Find even or odd values : Easy
From the following dataframe, write a SQL query to find the even or odd values. Return "Even" for even number and "Odd" for odd number.

ANS = SELECT srno, col_val,
       CASE col_val 
           WHEN  col_val % 2 = 0
               THEN 'Even' 
           else  'Odd'
       END as 'even_odd'
FROM 
    tablefortest
    
QUE 30) Overall rate Easy
From the following dataframe, write a SQL query to find the overall rate of execution of orders, 
which is the number of orders execution divided by the number of orders quote. Return rate_of_execution rounded to 2 decimals places.

ANS = SELECT
ROUND(
    IFNULL(
    (SELECT COUNT(*) FROM (SELECT DISTINCT orders_from, executed_from FROM orders_executed) AS A)
    /
    (SELECT COUNT(*) FROM (SELECT DISTINCT distributor_id, company_id FROM orders_issued) AS B),
    0)
, 2) AS rate_of_execution;

QUE 31) No order : Easy
From the following dataframes find those customers who did not make any order to the supplier 'DCX LTD'.
ANS = SELECT C.customer_name
FROM orders A , supplier B ,customers C
WHERE B.supplier_id != A.supplier_id
limit 3

QUE 32)From the following dataframes, write an SQL query to find the best seller by total sales price. Return distributor ID , If there is a tie, report them all.









